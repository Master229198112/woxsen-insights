'use client';\nimport { useState, useEffect, useRef } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport Navbar from '@/components/layout/Navbar';\nimport { AlertTriangle, Wifi, WifiOff, RefreshCw, Eye, Users, Activity } from 'lucide-react';\n\nexport default function DebugPage() {\n  const [apiCalls, setApiCalls] = useState([]);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [stats, setStats] = useState({\n    total: 0,\n    lastMinute: 0,\n    notifications: 0,\n    other: 0\n  });\n  const originalFetch = useRef(null);\n  const startTime = useRef(Date.now());\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && !originalFetch.current) {\n      // Store original fetch\n      originalFetch.current = window.fetch;\n      \n      // Override fetch to monitor API calls\n      window.fetch = async (...args) => {\n        const [url, options] = args;\n        const isApiCall = url.includes('/api/');\n        \n        if (isApiCall && isMonitoring) {\n          const callInfo = {\n            id: Date.now() + Math.random(),\n            url: url.toString(),\n            method: options?.method || 'GET',\n            timestamp: new Date().toISOString(),\n            time: Date.now()\n          };\n          \n          setApiCalls(prev => [callInfo, ...prev.slice(0, 49)]); // Keep last 50 calls\n          \n          console.log('üîç [API Monitor] Call detected:', callInfo);\n        }\n        \n        // Call original fetch\n        const response = await originalFetch.current(...args);\n        \n        if (isApiCall && isMonitoring) {\n          const duration = Date.now() - (Date.now() - 100); // Approximate\n          console.log('üîç [API Monitor] Response:', {\n            url: url.toString(),\n            status: response.status,\n            duration: duration + 'ms'\n          });\n        }\n        \n        return response;\n      };\n    }\n    \n    return () => {\n      // Restore original fetch on cleanup\n      if (originalFetch.current) {\n        window.fetch = originalFetch.current;\n      }\n    };\n  }, [isMonitoring]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const oneMinuteAgo = now - 60000;\n      \n      setStats(prev => ({\n        total: apiCalls.length,\n        lastMinute: apiCalls.filter(call => call.time > oneMinuteAgo).length,\n        notifications: apiCalls.filter(call => call.url.includes('/notifications')).length,\n        other: apiCalls.filter(call => !call.url.includes('/notifications')).length\n      }));\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, [apiCalls]);\n\n  const toggleMonitoring = () => {\n    setIsMonitoring(!isMonitoring);\n    if (!isMonitoring) {\n      setApiCalls([]);\n      startTime.current = Date.now();\n    }\n  };\n\n  const clearCalls = () => {\n    setApiCalls([]);\n    startTime.current = Date.now();\n  };\n\n  const getCallFrequency = () => {\n    if (apiCalls.length < 2) return 'N/A';\n    const intervals = [];\n    for (let i = 0; i < Math.min(apiCalls.length - 1, 10); i++) {\n      intervals.push(apiCalls[i].time - apiCalls[i + 1].time);\n    }\n    const avg = intervals.reduce((a, b) => a + b, 0) / intervals.length;\n    return `${Math.round(avg / 1000)}s avg`;\n  };\n\n  const getUniqueUrls = () => {\n    const urls = [...new Set(apiCalls.map(call => call.url))];\n    return urls.slice(0, 10); // Show top 10\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">API Call Monitor</h1>\n              <p className=\"text-gray-600\">Debug high CPU usage by monitoring API calls in real-time</p>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={toggleMonitoring}\n                className={`flex items-center space-x-2 ${\n                  isMonitoring ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'\n                }`}\n              >\n                {isMonitoring ? (\n                  <>\n                    <Activity className=\"h-4 w-4 animate-pulse\" />\n                    <span>Stop Monitoring</span>\n                  </>\n                ) : (\n                  <>\n                    <Eye className=\"h-4 w-4\" />\n                    <span>Start Monitoring</span>\n                  </>\n                )}\n              </Button>\n              \n              <Button onClick={clearCalls} variant=\"outline\">\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Clear\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Status Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Activity className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total API Calls</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className={`h-8 w-8 ${stats.lastMinute > 5 ? 'text-red-600' : 'text-green-600'}`} />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Last Minute</p>\n                  <p className={`text-2xl font-bold ${stats.lastMinute > 5 ? 'text-red-600' : 'text-green-600'}`}>\n                    {stats.lastMinute}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Wifi className=\"h-8 w-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Notifications</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.notifications}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Users className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Call Frequency</p>\n                  <p className=\"text-lg font-bold text-gray-900\">{getCallFrequency()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Monitoring Status */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              {isMonitoring ? (\n                <>\n                  <Wifi className=\"h-5 w-5 text-green-600\" />\n                  <span>Monitoring Active</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"h-5 w-5 text-gray-500\" />\n                  <span>Monitoring Stopped</span>\n                </>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Running Time</h4>\n                <p className=\"text-sm text-gray-600\">\n                  {Math.round((Date.now() - startTime.current) / 1000)}s since start\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Rate Limit Alert</h4>\n                <p className={`text-sm ${\n                  stats.lastMinute > 10 ? 'text-red-600 font-medium' : 'text-green-600'\n                }`}>\n                  {stats.lastMinute > 10 ? '‚ö†Ô∏è High frequency detected!' : '‚úÖ Normal frequency'}\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Browser Tab</h4>\n                <p className={`text-sm ${\n                  document.hidden ? 'text-orange-600' : 'text-green-600'\n                }`}>\n                  {document.hidden ? 'üî∂ Tab is hidden' : 'üü¢ Tab is active'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Unique URLs */}\n        {getUniqueUrls().length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>API Endpoints Called</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {getUniqueUrls().map((url, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span className=\"text-sm font-mono\">{url}</span>\n                    <span className=\"text-xs text-gray-500\">\n                      {apiCalls.filter(call => call.url === url).length} calls\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Recent API Calls */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent API Calls (Last 50)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {apiCalls.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Activity className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                <p>{isMonitoring ? 'Waiting for API calls...' : 'Start monitoring to see API calls'}</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {apiCalls.map((call) => (\n                  <div key={call.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded text-sm\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-mono text-xs text-blue-600\">{call.url}</div>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {new Date(call.timestamp).toLocaleTimeString()} ‚Ä¢ {call.method}\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {Math.round((Date.now() - call.time) / 1000)}s ago\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Instructions */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>üîç How to Use This Debug Tool</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-sm\">\n              <div>\n                <h4 className=\"font-medium\">1. Start Monitoring</h4>\n                <p className=\"text-gray-600\">Click \"Start Monitoring\" to begin tracking all API calls from this browser tab.</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">2. Look for High Frequency</h4>\n                <p className=\"text-gray-600\">If \"Last Minute\" shows more than 5-10 calls, you have excessive polling.</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">3. Check Tab Status</h4>\n                <p className=\"text-gray-600\">Smart polling should pause when tab is hidden. Switch tabs to test this.</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium\">4. Identify Sources</h4>\n                <p className=\"text-gray-600\">Check \"API Endpoints Called\" to see which endpoints are being hit frequently.</p>\n              </div>\n              <div className=\"bg-yellow-50 p-3 rounded\">\n                <h4 className=\"font-medium text-yellow-800\">Expected Behavior with Smart Polling:</h4>\n                <ul className=\"text-yellow-700 mt-2 space-y-1\">\n                  <li>‚Ä¢ Notifications: Every 2 minutes when tab is active</li>\n                  <li>‚Ä¢ Admin pages: Every 3-5 minutes when tab is active</li>\n                  <li>‚Ä¢ Zero calls when tab is hidden/inactive</li>\n                  <li>‚Ä¢ One immediate call when tab becomes active</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}"